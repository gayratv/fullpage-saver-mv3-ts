--- a/src/background.ts
+++ b/src/background.ts
@@
 let creatingOffscreen: Promise<void> | null = null;
 async function ensureOffscreen(path = "offscreen.html"): Promise<void> {
 @@
   await creatingOffscreen;
   creatingOffscreen = null;
 }

+/**
+ * Инициализируем целевой скролл-контейнер на странице
+ */
+async function initScrollTarget(tabId: number): Promise<void> {
+  await chrome.scripting.executeScript({
+    target: { tabId },
+    func: () => {
+      if ((window as any).__fpsScrollInited) return;
+      (window as any).__fpsScrollInited = true;
+
+      function isScrollable(el: Element) {
+        const cs = getComputedStyle(el as HTMLElement);
+        const oy = cs.overflowY;
+        return (oy === "auto" || oy === "scroll") &&
+               (el as HTMLElement).scrollHeight > (el as HTMLElement).clientHeight;
+      }
+
+      const candidates = new Set<Element>();
+      if (document.scrollingElement) candidates.add(document.scrollingElement);
+      if (document.documentElement)  candidates.add(document.documentElement);
+      if (document.body)             candidates.add(document.body);
+      document.querySelectorAll<HTMLElement>("*").forEach(el => { if (isScrollable(el)) candidates.add(el); });
+
+      let target: HTMLElement = (document.scrollingElement || document.documentElement || document.body) as HTMLElement;
+      let maxH = target.scrollHeight || 0;
+      candidates.forEach((el: any) => {
+        const h = el.scrollHeight || 0;
+        if (h > maxH) { maxH = h; target = el; }
+      });
+
+      target.setAttribute("data-fps-scroll-target", "1");
+      (window as any).__fpsScrollSelector = '[data-fps-scroll-target="1"]';
+    }
+  });
+}
+
-async function getPlan(tabId: number): Promise<Plan> {
-  const [{ result }] = await chrome.scripting.executeScript<[], Plan>({
-    target: { tabId },
-    func: () => {
-      const dpr = self.devicePixelRatio || 1;
-      const vw = innerWidth, vh = innerHeight;
-      const sw = Math.max(document.documentElement.scrollWidth, document.body?.scrollWidth || 0, vw);
-      const sh = Math.max(document.documentElement.scrollHeight, document.body?.scrollHeight || 0, vh);
-      const overlap = Math.min(64, Math.floor(vh * 0.08));
-      const step = Math.max(1, vh - overlap);
-      const stops: number[] = [];
-      for (let y = 0; y < sh; y += step) {
-        const pos = Math.min(y, sh - vh);
-        if (!stops.length || stops[stops.length - 1] !== pos) stops.push(pos);
-        if (y + vh >= sh) break;
-      }
-      return { dpr, vw, vh, sw, sh, overlap, step, stops };
-    }
-  });
-  return result;
-}
+async function getPlan(tabId: number): Promise<Plan> {
+  const [{ result }] = await chrome.scripting.executeScript<[], Plan>({
+    target: { tabId },
+    func: () => {
+      const sel = (window as any).__fpsScrollSelector || "[data-fps-scroll-target='1']";
+      const el = document.querySelector(sel) as HTMLElement | null;
+      const dpr = self.devicePixelRatio || 1;
+      const vw = innerWidth;
+      const vh = el ? el.clientHeight : innerHeight;
+      const sw = el ? el.scrollWidth : innerWidth;
+      const sh = el
+        ? el.scrollHeight
+        : Math.max(document.documentElement.scrollHeight, document.body?.scrollHeight || 0, innerHeight);
+      const overlap = Math.min(64, Math.floor(vh * 0.08));
+      const step = Math.max(1, vh - overlap);
+      const stops: number[] = [];
+      for (let y = 0; y < sh; y += step) {
+        const pos = Math.min(y, sh - vh);
+        if (!stops.length || stops[stops.length - 1] !== pos) stops.push(pos);
+        if (y + vh >= sh) break;
+      }
+      return { dpr, vw, vh, sw, sh, overlap, step, stops };
+    }
+  });
+  return result;
+}

-async function scrollToY(tabId: number, y: number): Promise<void> {
-  await chrome.scripting.executeScript({
-    target: { tabId },
-    func: (top: number) => { window.scrollTo(0, top); },
-    args: [y]
-  });
-}
+async function scrollToY(tabId: number, y: number): Promise<void> {
+  await chrome.scripting.executeScript({
+    target: { tabId },
+    func: (top: number) => {
+      const sel = (window as any).__fpsScrollSelector || "[data-fps-scroll-target='1']";
+      const el = document.querySelector(sel) as HTMLElement | null;
+      if (el) {
+        el.scrollTop = top;
+      } else {
+        document.documentElement.scrollTop = top;
+        document.body && (document.body.scrollTop = top);
+        window.scrollTo(0, top);
+      }
+    },
+    args: [y]
+  });
+}
@@
 async function runCapture(tabId: number, opts: StartOpts): Promise<void> {
   const tab = await chrome.tabs.get(tabId);
-  await ensureOffscreen();
-  const plan = await getPlan(tabId);
+  await ensureOffscreen();
+  await initScrollTarget(tabId);
+  const plan = await getPlan(tabId);