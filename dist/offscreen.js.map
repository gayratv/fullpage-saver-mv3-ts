{
  "version": 3,
  "sources": ["../src/offscreen.ts"],
  "sourcesContent": ["// src/offscreen.ts\n/* global OffscreenCanvas */\n\nimport type { Plan, Tile } from \"./types\";\n\nfunction loadImage(src: string): Promise<HTMLImageElement> {\n  return new Promise((res, rej) => {\n    const img = new Image();\n    img.onload = () => res(img);\n    img.onerror = rej;\n    img.src = src;\n  });\n}\n\nchrome.runtime.onConnect.addListener((port) => {\n  if (port.name !== \"stitch\") return;\n  // eslint-disable-next-line no-console\n  console.debug(\"offscreen connected\");\n  port.onMessage.addListener(async (msg) => {\n    if (msg?.type !== \"stitch\") return;\n    // eslint-disable-next-line no-console\n    console.debug(\"offscreen received\", { tiles: msg.tiles?.length });\n    const { plan, tiles, fileType = \"image/jpeg\", quality = 0.92 } = msg as {\n      plan: Plan; tiles: Tile[]; fileType: string; quality: number;\n    };\n    try {\n      if (!tiles?.length) throw new Error(\"No tiles\");\n      const first = await loadImage(tiles[0].dataUrl);\n      const tileW = first.width, tileH = first.height;\n      const overlapPx = Math.round((plan.overlap / plan.vh) * tileH);\n      const totalH = tileH + Math.max(0, (tiles.length - 1)) * (tileH - overlapPx);\n\n      const canvas: HTMLCanvasElement | OffscreenCanvas =\n        (typeof OffscreenCanvas !== \"undefined\")\n          ? new OffscreenCanvas(tileW, totalH)\n          : Object.assign(document.createElement(\"canvas\"), { width: tileW, height: totalH });\n\n      const ctx = (canvas as any).getContext(\"2d\")!;\n\n      let yDraw = 0;\n      for (let i = 0; i < tiles.length; i++) {\n        const img = i === 0 ? first : await loadImage(tiles[i].dataUrl);\n        if (i === 0) { ctx.drawImage(img, 0, 0); yDraw = tileH; }\n        else { ctx.drawImage(img, 0, yDraw - overlapPx); yDraw += tileH - overlapPx; }\n      }\n\n      async function toDataURLFromCanvas(cnv: any, type: string, q: number): Promise<string> {\n        if (cnv.convertToBlob) {\n          const blob = await cnv.convertToBlob({ type, quality: q });\n          const fr = new FileReader();\n          return await new Promise<string>((resolve) => {\n            fr.onload = () => resolve(fr.result as string);\n            fr.readAsDataURL(blob);\n          });\n        } else {\n          return cnv.toDataURL(type, q);\n        }\n      }\n\n      const dataUrl = await toDataURLFromCanvas(canvas, fileType, quality);\n      // eslint-disable-next-line no-console\n      console.debug(\"offscreen stitched\", { length: dataUrl.length });\n      port.postMessage({ type: \"stitched\", dataUrl });\n    } catch (e: any) {\n      console.error(\"Stitch error\", e);\n      port.postMessage({ type: \"error\", message: String(e) });\n    }\n  });\n});\n"],
  "mappings": ";AAKA,SAAS,UAAU,KAAwC;AACzD,SAAO,IAAI,QAAQ,CAAC,KAAK,QAAQ;AAC/B,UAAM,MAAM,IAAI,MAAM;AACtB,QAAI,SAAS,MAAM,IAAI,GAAG;AAC1B,QAAI,UAAU;AACd,QAAI,MAAM;AAAA,EACZ,CAAC;AACH;AAEA,OAAO,QAAQ,UAAU,YAAY,CAAC,SAAS;AAC7C,MAAI,KAAK,SAAS,SAAU;AAE5B,UAAQ,MAAM,qBAAqB;AACnC,OAAK,UAAU,YAAY,OAAO,QAAQ;AACxC,QAAI,KAAK,SAAS,SAAU;AAE5B,YAAQ,MAAM,sBAAsB,EAAE,OAAO,IAAI,OAAO,OAAO,CAAC;AAChE,UAAM,EAAE,MAAM,OAAO,WAAW,cAAc,UAAU,KAAK,IAAI;AAGjE,QAAI;AACF,UAAI,CAAC,OAAO,OAAQ,OAAM,IAAI,MAAM,UAAU;AAC9C,YAAM,QAAQ,MAAM,UAAU,MAAM,CAAC,EAAE,OAAO;AAC9C,YAAM,QAAQ,MAAM,OAAO,QAAQ,MAAM;AACzC,YAAM,YAAY,KAAK,MAAO,KAAK,UAAU,KAAK,KAAM,KAAK;AAC7D,YAAM,SAAS,QAAQ,KAAK,IAAI,GAAI,MAAM,SAAS,CAAE,KAAK,QAAQ;AAElE,YAAM,SACH,OAAO,oBAAoB,cACxB,IAAI,gBAAgB,OAAO,MAAM,IACjC,OAAO,OAAO,SAAS,cAAc,QAAQ,GAAG,EAAE,OAAO,OAAO,QAAQ,OAAO,CAAC;AAEtF,YAAM,MAAO,OAAe,WAAW,IAAI;AAE3C,UAAI,QAAQ;AACZ,eAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACrC,cAAM,MAAM,MAAM,IAAI,QAAQ,MAAM,UAAU,MAAM,CAAC,EAAE,OAAO;AAC9D,YAAI,MAAM,GAAG;AAAE,cAAI,UAAU,KAAK,GAAG,CAAC;AAAG,kBAAQ;AAAA,QAAO,OACnD;AAAE,cAAI,UAAU,KAAK,GAAG,QAAQ,SAAS;AAAG,mBAAS,QAAQ;AAAA,QAAW;AAAA,MAC/E;AAEA,qBAAe,oBAAoB,KAAU,MAAc,GAA4B;AACrF,YAAI,IAAI,eAAe;AACrB,gBAAM,OAAO,MAAM,IAAI,cAAc,EAAE,MAAM,SAAS,EAAE,CAAC;AACzD,gBAAM,KAAK,IAAI,WAAW;AAC1B,iBAAO,MAAM,IAAI,QAAgB,CAAC,YAAY;AAC5C,eAAG,SAAS,MAAM,QAAQ,GAAG,MAAgB;AAC7C,eAAG,cAAc,IAAI;AAAA,UACvB,CAAC;AAAA,QACH,OAAO;AACL,iBAAO,IAAI,UAAU,MAAM,CAAC;AAAA,QAC9B;AAAA,MACF;AAEA,YAAM,UAAU,MAAM,oBAAoB,QAAQ,UAAU,OAAO;AAEnE,cAAQ,MAAM,sBAAsB,EAAE,QAAQ,QAAQ,OAAO,CAAC;AAC9D,WAAK,YAAY,EAAE,MAAM,YAAY,QAAQ,CAAC;AAAA,IAChD,SAAS,GAAQ;AACf,cAAQ,MAAM,gBAAgB,CAAC;AAC/B,WAAK,YAAY,EAAE,MAAM,SAAS,SAAS,OAAO,CAAC,EAAE,CAAC;AAAA,IACxD;AAAA,EACF,CAAC;AACH,CAAC;",
  "names": []
}
